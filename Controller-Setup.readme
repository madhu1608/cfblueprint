# Ansible controller boot strap file

#sudo yum update -y
#sudo yum install ansible -y
#ssh-keygen
#ssh-copy-id vagrant@192.168.100.5

# cat /etc/ansible/hosts
[webservers]
192.168.100.5


#ansible all -m ping


[vagrant@ctrlr ansible-playbooks]$ cat hello.yml
---
- name: Hello World!
  hosts: all
  tasks:
  - name: Hello World!
    shell: echo "Hi! Tower is working."
  - name: Installs nginx web server
    yum: pkg=telnet state=installed

#############################

Host Key Checking

Ansible has host key checking enabled by default.

If a host is reinstalled and has a different key in ‘known_hosts’, this will result in an error message until corrected. If a host is not initially in ‘known_hosts’ this will result in prompting for confirmation of the key, which results in an interactive experience if using Ansible, from say, cron. You might not want this.

If you understand the implications and wish to disable this behavior, you can do so by editing /etc/ansible/ansible.cfg or ~/.ansible.cfg:

[defaults]
host_key_checking = False

Alternatively this can be set by the ANSIBLE_HOST_KEY_CHECKING environment variable:

$ export ANSIBLE_HOST_KEY_CHECKING=False

###############################
[vagrant@ctrlr ~]$ vi myfirstplaybook.yml
---
- hosts: webservers
  become: true
  vars:
    http_port: 80
    max_clients: 200
  tasks:
  - name: ensure apache is at the latest version
    yum: name=httpd state=latest


###############################

[vagrant@ctrlr ~]$ cat temple-playbook.yml 
---
- hosts: webservers
  vars:
    variable1: 'Hello...!!!'
    variable2: 'My first playbook using template'
  tasks:
    - name: Basic Template Example
      template:
        src: example1.j2
        dest: /home/vagrant/output.txt
[vagrant@ctrlr ~]$ 


[vagrant@ctrlr ~]$ cat example1.j2 
{{ variable1 }}
No effects on this line
{{ variable2 }}


